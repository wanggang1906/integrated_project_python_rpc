# -*- coding: utf-8 -*-

# 闭包
# 闭包函数的实例
# outer是外部函数 a和b都是外函数的临时变量
def outer( a ):
    b = 10
    # inner是内函数
    def inner():
        # 在内函数中 用到了外函数的临时变量
        print(a+b)
    # 外函数的返回值是内函数的引用
    return inner

# 修改闭包变量的实例
# outer是外部函数 a和b都是外函数的临时变量
def outer02( a ):
    b = 10  # a和b都是闭包变量
    c = [a] # 这里对应修改闭包变量的方法2
    # inner是内函数
    def inner02():
        # 内函数中想修改闭包变量
        # 方法1 nonlocal关键字声明
        nonlocal  b
        b+=1
        # 方法二，把闭包变量修改成可变数据类型 比如列表
        c[0] += 1
        print(c[0])
        print(b)
    # 外函数的返回值是内函数的引用
    return inner02

#coding:utf8
def outer03(x):
    def inner03(y):
        nonlocal x
        x += y
        return x
    return inner03





if __name__ == '__main__':
    # 在这里我们调用外函数传入参数5
    # 此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo
    # 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数
    demo = outer(5)
    print("此时的demo变量是一个函数的地址：",demo)
    # 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量
    # demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数
    demo() # 15

    # 在python3中，可以用nonlocal 关键字声明 一个变量， 表示这个变量不是局部变量空间的变量，需要向上一层变量空间找这个变量。
    demo2 = outer(7)
    demo2()# 17

    demo03 = outer02(5)
    print("demo03的地址：",demo03)
    demo03() # 6  11

# 闭包的用处
# 3.1装饰器！！！装饰器是做什么的？？其中一个应用就是，我们工作中写了一个登录功能，我们想统计这个功能执行花了多长时间，我们可以用装饰器装饰这个登录模块，装饰器帮我们完成登录函数执行之前和之后取时间。
# 3.2面向对象！！！经历了上面的分析，我们发现外函数的临时变量送给了内函数。大家回想一下类对象的情况，对象有好多类似的属性和方法，所以我们创建类，用类创建出来的对象都具有相同的属性方法。闭包也是实现面向对象的方法之一。在python当中虽然我们不这样用，在其他编程语言入比如avaScript中，经常用闭包来实现面向对象编程
# 3.3实现单利模式！！ 其实这也是装饰器的应用。
    a = outer03(10)
    print("a的地址：",a)
    print(a(1)) # 11
    print(a(3)) # 14